<?xml version="1.0" encoding="UTF-8"?><xsl:stylesheet version="1.0"    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"    xmlns:xsd="http://www.w3.org/2001/XMLSchema"    xmlns:meta="http://morphml.org/metadata/schema"     xmlns:fn="http://www.w3.org/2005/02/xpath-functions"><!--    This file is used to convert a generic XSD file into a more readable format in HTML.    It has only been tested with NeuroML files and the limited set of XSD elements they use.        This file has been developed as part of the neuroConstruct project        Funding for this work has been received from the Medical Research council        Author: Padraig Gleeson    Copyright 2006 Department of Physiology, UCL    --><xsl:output method="html" indent="yes" /><!--Main template--><xsl:template match="/xsd:schema">    <a name="topOfPage"/>    <h3>XSD Documentation</h3><xsl:apply-templates  select="xsd:annotation/xsd:documentation"/><table frame="box" rules="all" align="centre" cellpadding="4" class="small"><xsl:call-template name="tableRow">        <xsl:with-param name="name">Schema info</xsl:with-param>        <xsl:with-param name="comment">Information on the namespaces, etc.</xsl:with-param></xsl:call-template><xsl:for-each select ="@*">    <xsl:call-template name="tableRow">            <xsl:with-param name="name"><xsl:value-of select="name()"/></xsl:with-param>            <xsl:with-param name="value"><xsl:value-of select="."/></xsl:with-param>    </xsl:call-template></xsl:for-each></table><br/><br/><xsl:if test="count(xsd:import) &gt; 0">    <table frame="box" rules="all" align="centre" cellpadding="4"  class="small">    <xsl:call-template name="tableRow">            <xsl:with-param name="name">Imported Schemas</xsl:with-param>            <xsl:with-param name="comment">Other schemas used by this file, with different target namespaces</xsl:with-param>    </xsl:call-template>    <xsl:for-each select ="xsd:import">        <xsl:call-template name="tableRow">            <xsl:with-param name="name">Namespace: <xsl:value-of select="@namespace"/></xsl:with-param>            <xsl:with-param name="value">Location: <xsl:value-of select="@schemaLocation"/></xsl:with-param>        </xsl:call-template>    </xsl:for-each>    </table>    <br/>    <br/></xsl:if><xsl:if test="count(xsd:include) &gt; 0">    <table frame="box" rules="all" align="centre" cellpadding="4">    <xsl:call-template name="tableRow">            <xsl:with-param name="name">Included Schemas</xsl:with-param>            <xsl:with-param name="comment">Other schemas used by this file, with the same target namespace</xsl:with-param>    </xsl:call-template>    <xsl:for-each select ="xsd:include">        <xsl:call-template name="tableRow">            <xsl:with-param name="name">Included schema</xsl:with-param>            <xsl:with-param name="value">Location: <xsl:value-of select="@schemaLocation"/></xsl:with-param>        </xsl:call-template>    </xsl:for-each>    </table>    <br/>    <br/></xsl:if><table frame="box" rules="all" align="centre" cellpadding="4" class="small"><xsl:if test="count(xsd:element) &gt; 0">    <xsl:call-template name="tableRow">        <xsl:with-param name="name">&lt;b&gt;Elements&lt;/b&gt;</xsl:with-param>        <xsl:with-param name="value">            <xsl:for-each select="xsd:element">                <xsl:sort select="@name"/>                &lt;a href="#<xsl:value-of select="@name"/>"&gt;<xsl:value-of select="@name"/>&lt;/a&gt;&amp;nbsp;&amp;nbsp;            </xsl:for-each>        </xsl:with-param>    </xsl:call-template></xsl:if><xsl:if test="count(xsd:simpleType) &gt; 0">    <xsl:call-template name="tableRow">        <xsl:with-param name="name">&lt;b&gt;Simple Types&lt;/b&gt;</xsl:with-param>        <xsl:with-param name="value">            <xsl:for-each select="xsd:simpleType">                <xsl:sort select="@name"/>                &lt;a href="#<xsl:value-of select="@name"/>"&gt;<xsl:value-of select="@name"/>&lt;/a&gt;&amp;nbsp;&amp;nbsp;            </xsl:for-each>        </xsl:with-param>    </xsl:call-template> </xsl:if><xsl:if test="count(xsd:group) &gt; 0">    <xsl:call-template name="tableRow">        <xsl:with-param name="name">&lt;b&gt;Groups&lt;/b&gt;</xsl:with-param>        <xsl:with-param name="value">            <xsl:for-each select="xsd:group">                <xsl:sort select="@name"/>                &lt;a href="#<xsl:value-of select="@name"/>"&gt;<xsl:value-of select="@name"/>&lt;/a&gt;&amp;nbsp;&amp;nbsp;            </xsl:for-each>        </xsl:with-param>    </xsl:call-template> </xsl:if><xsl:if test="count(xsd:attributeGroup) &gt; 0">    <xsl:call-template name="tableRow">        <xsl:with-param name="name">&lt;b&gt;Attribute Groups&lt;/b&gt;</xsl:with-param>        <xsl:with-param name="value">            <xsl:for-each select="xsd:attributeGroup">                <xsl:sort select="@name"/>                &lt;a href="#<xsl:value-of select="@name"/>"&gt;<xsl:value-of select="@name"/>&lt;/a&gt;&amp;nbsp;&amp;nbsp;            </xsl:for-each>        </xsl:with-param>    </xsl:call-template> </xsl:if><xsl:if test="count(xsd:complexType) &gt; 0">    <xsl:call-template name="tableRow">        <xsl:with-param name="name">&lt;b&gt;Complex Types&lt;/b&gt;</xsl:with-param>        <xsl:with-param name="value">            <xsl:for-each select="xsd:complexType">                <xsl:sort select="@name"/>                    &lt;a href="#<xsl:value-of select="@name"/>"&gt;<xsl:value-of select="@name"/>&lt;/a&gt;&amp;nbsp;&amp;nbsp;                            </xsl:for-each>        </xsl:with-param>    </xsl:call-template> </xsl:if></table><xsl:if test="count(xsd:element) &gt; 0">    <h3>Elements</h3>    <xsl:for-each select="xsd:element">        <xsl:apply-templates  select="."/>        <a href="#topOfPage">Top</a>        <br/>        <br/>    </xsl:for-each></xsl:if><xsl:if test="count(xsd:simpleType) &gt; 0">    <h3>Simple Types</h3>    <xsl:for-each select="xsd:simpleType">        <xsl:apply-templates  select="."/>        <a href="#topOfPage">Top</a>        <br/>        <br/>    </xsl:for-each></xsl:if><xsl:if test="count(xsd:group) &gt; 0"><h3>Groups</h3>    <xsl:for-each select="xsd:group">        <xsl:apply-templates  select="."/>        <a href="#topOfPage">Top</a>        <br/>        <br/>    </xsl:for-each></xsl:if><xsl:if test="count(xsd:attributeGroup) &gt; 0"><h3>Attribute Groups</h3>    <xsl:for-each select="xsd:attributeGroup">        <xsl:apply-templates  select="."/>        <a href="#topOfPage">Top</a>        <br/>        <br/>    </xsl:for-each></xsl:if><xsl:if test="count(xsd:complexType) &gt; 0">    <h3>Complex Types</h3>    <xsl:for-each select="xsd:complexType">        <xsl:apply-templates  select="."/>        <a href="#topOfPage">Top</a>        <br/>        <br/>    </xsl:for-each></xsl:if></xsl:template><!--End Main template--><!-- Main documentation --><xsl:template match="xsd:annotation/xsd:documentation"><table frame="box" rules="all" align="centre" cellpadding="4" class="small">    <xsl:call-template name="tableRow">        <xsl:with-param name="name">Description</xsl:with-param>        <xsl:with-param name="comment">Description of the Schema taken from the XSD file</xsl:with-param>        <xsl:with-param name="value"><xsl:value-of select="."/></xsl:with-param>     </xsl:call-template></table><br/><br/></xsl:template><!-- element --><xsl:template match="xsd:element"><xsl:element name="a">  <xsl:attribute name="name">    <xsl:value-of select="@name" />  </xsl:attribute> </xsl:element><table class="bold" frame="box" rules="all" align="centre" cellpadding="4" width="100%"><xsl:call-template name="tableRow">        <xsl:with-param name="name">Element: &lt;b&gt;<xsl:value-of select="@name"/>&lt;/b&gt;</xsl:with-param>                <xsl:with-param name="comment"><xsl:apply-templates  select="xsd:annotation"/></xsl:with-param>        <xsl:with-param name="value"><xsl:choose><xsl:when test="count(@type) &gt; 0">Type: &lt;a href="#<xsl:value-of select="@type"/>"&gt;<xsl:value-of select="@type"/>&lt;/a&gt;</xsl:when><xsl:otherwise>&amp;nbsp</xsl:otherwise></xsl:choose></xsl:with-param>        <xsl:with-param name="class">header</xsl:with-param>        </xsl:call-template>    <xsl:for-each select="xsd:complexType">                <xsl:if test="count(xsd:sequence) &gt; 0">            <xsl:for-each select="xsd:sequence">                                <tr><td colspan="2"  class="small">The following elements must appear in the sequence outlined here.                <xsl:call-template name="min_max_string"/>  </td></tr>                    <xsl:apply-templates  select="."/>            </xsl:for-each>        </xsl:if>        <xsl:if test="count(xsd:choice) &gt; 0">            <xsl:for-each select="xsd:choice">                            <tr><td colspan="2"  class="small">Only one of the following elements may appear.                <xsl:if test="count(@minOccurs) &gt; 0">Minimum occurances allowed: <xsl:value-of select="@minOccurs"/> </xsl:if>                 <xsl:if test="count(@maxOccurs) &gt; 0">Maximum occurances allowed: <xsl:value-of select="@maxOccurs"/> </xsl:if> </td></tr>                    <xsl:apply-templates  select="."/>            </xsl:for-each>        </xsl:if>            <xsl:if test="count(xsd:all) &gt; 0">            <tr><td colspan="2" class="small">The following elements may appear once or zero times in any order</td></tr>            <xsl:for-each select="xsd:all">                    <xsl:apply-templates  select="."/>            </xsl:for-each>        </xsl:if>        <xsl:if test="count(xsd:attribute) &gt; 0">        <tr><td colspan="2" class="small">Attributes</td></tr>                <xsl:for-each select="xsd:attribute">        <xsl:call-template name="tableRow">                <xsl:with-param name="name">&lt;b&gt;<xsl:value-of select="@name"/>&lt;/b&gt;</xsl:with-param>                <xsl:with-param name="comment"><xsl:apply-templates  select="xsd:annotation"/></xsl:with-param>                 <xsl:with-param name="value">Type: <xsl:call-template name="getInternalLink"><xsl:with-param name="ref"><xsl:value-of select="@type"/></xsl:with-param></xsl:call-template>, Use: <xsl:choose>                        <xsl:when test="count(@use) &gt; 0"><xsl:value-of select="@use"/></xsl:when>                        <xsl:otherwise>optional</xsl:otherwise></xsl:choose><xsl:if test="count(@default) &gt; 0">, default: &lt;b&gt;<xsl:value-of select="@default"/>&lt;/b&gt;</xsl:if></xsl:with-param>        </xsl:call-template>        </xsl:for-each>        </xsl:if>        <xsl:if test="count(xsd:attributeGroup) &gt; 0">        <tr><td colspan="2" class="small">Attribute Groups</td></tr>                <xsl:for-each select="xsd:attributeGroup">        <xsl:call-template name="tableRow">                <xsl:with-param name="name">&lt;b&gt;<xsl:value-of select="@ref"/>&lt;/b&gt;</xsl:with-param>                <xsl:with-param name="comment"><xsl:apply-templates  select="xsd:annotation"/></xsl:with-param>                 <xsl:with-param name="value">Reference: &lt;b&gt;<xsl:value-of select="@ref"/>&lt;/b&gt;</xsl:with-param>        </xsl:call-template>        </xsl:for-each>        </xsl:if>            </xsl:for-each>        <xsl:if test="count(../../@name) &gt; 0">        <xsl:call-template name="tableRow">             <xsl:with-param name="name"><xsl:value-of select="@name"/> is used by: &lt;a href="#<xsl:value-of select="../../@name"/>"&gt;<xsl:value-of select="../../@name"/>&lt;/a&gt; (<xsl:value-of select="name(../..)"/>)</xsl:with-param>            <xsl:with-param name="comment">Instances of this element which are used by other elements in this document</xsl:with-param>        </xsl:call-template>    </xsl:if></table><br/><br/></xsl:template><!-- simpleType --><xsl:template match="xsd:simpleType"><xsl:element name="a">  <xsl:attribute name="name">    <xsl:value-of select="@name" />  </xsl:attribute> </xsl:element><table frame="box" rules="all" align="centre" cellpadding="4" width="100%">    <xsl:variable name="name"><xsl:value-of select="@name"/></xsl:variable>    <xsl:call-template name="tableRow">        <xsl:with-param name="name">&lt;a href="<xsl:call-template name="getExternalURL"><xsl:with-param name="ref">simpleType</xsl:with-param></xsl:call-template>#"&gt;Simple Type:&lt;/a&gt; &lt;b&gt;<xsl:value-of select="@name"/>&lt;/b&gt;</xsl:with-param>        <xsl:with-param name="comment"><xsl:apply-templates  select="xsd:annotation"/></xsl:with-param>    </xsl:call-template>    <xsl:apply-templates  select="xsd:restriction"/>    <xsl:call-template name="getRefs">    <xsl:with-param name="name">        <xsl:value-of select="@name"/>    </xsl:with-param></xsl:call-template></table><br/><br/></xsl:template><xsl:template name="sequence_choice_all">            <xsl:if test="count(xsd:sequence) &gt; 0">        <xsl:for-each select="xsd:sequence">            <tr><td colspan="2"  class="small">The following elements must appear in the sequence outlined here.                <xsl:if test="count(@minOccurs) &gt; 0">Minimum occurances allowed: <xsl:value-of select="@minOccurs"/> </xsl:if>                 <xsl:if test="count(@maxOccurs) &gt; 0">Maximum occurances allowed: <xsl:value-of select="@maxOccurs"/> </xsl:if> </td></tr>                <xsl:apply-templates  select="."/>        </xsl:for-each>    </xsl:if>        <xsl:if test="count(xsd:choice) &gt; 0">        <xsl:for-each select="xsd:choice">                    <tr><td colspan="2"  class="small">Only one of the following elements may appear.                                 <xsl:if test="count(@minOccurs) &gt; 0">Minimum occurances allowed: <xsl:value-of select="@minOccurs"/> </xsl:if>                 <xsl:if test="count(@maxOccurs) &gt; 0">Maximum occurances allowed: <xsl:value-of select="@maxOccurs"/> </xsl:if> </td></tr>                <xsl:apply-templates  select="."/>        </xsl:for-each>    </xsl:if>            <xsl:if test="count(xsd:all) &gt; 0">        <tr><td colspan="2"  class="small">The following elements may appear once or zero times in any order</td></tr>        <xsl:for-each select="xsd:all">                <xsl:apply-templates  select="."/>        </xsl:for-each>    </xsl:if>        </xsl:template><!-- complexType --><xsl:template match="xsd:complexType">        <xsl:element name="a">      <xsl:attribute name="name">        <xsl:value-of select="@name" />      </xsl:attribute>     </xsl:element>    <table frame="box" rules="all" align="centre" cellpadding="4" width="100%">    <xsl:call-template name="tableRow">            <xsl:with-param name="name">&lt;a href="<xsl:call-template name="getExternalURL"><xsl:with-param name="ref">complexType</xsl:with-param></xsl:call-template>#"&gt;Complex Type:&lt;/a&gt; &lt;b&gt;<xsl:value-of select="@name"/>&lt;/b&gt;</xsl:with-param>            <xsl:with-param name="comment"><xsl:apply-templates  select="xsd:annotation"/></xsl:with-param>    </xsl:call-template>    <tr><td>    <table frame="box" rules="all" align="centre" cellpadding="4">        <xsl:call-template name="sequence_choice_all"/>        <xsl:for-each select="xsd:complexContent">            <xsl:apply-templates  select="xsd:restriction"/>            <xsl:apply-templates  select="xsd:extension"/>        </xsl:for-each>        <xsl:if test="count(xsd:attribute) &gt; 0">            <tr><td colspan="2"  class="small">Attributes</td></tr>            <xsl:for-each select="xsd:attribute">            <xsl:call-template name="tableRow">                    <xsl:with-param name="name">&lt;b&gt;<xsl:value-of select="@name"/>&lt;/b&gt;</xsl:with-param>                    <xsl:with-param name="comment"><xsl:apply-templates  select="xsd:annotation"/></xsl:with-param>                    <xsl:with-param name="value">Type: <xsl:call-template name="getInternalLink"><xsl:with-param name="ref"><xsl:value-of select="@type"/></xsl:with-param></xsl:call-template>, Use: <xsl:choose>                            <xsl:when test="count(@use) &gt; 0"><xsl:value-of select="@use"/></xsl:when>                            <xsl:otherwise>optional</xsl:otherwise></xsl:choose><xsl:if test="count(@default) &gt; 0">, default: &lt;b&gt;<xsl:value-of select="@default"/>&lt;/b&gt;</xsl:if></xsl:with-param>            </xsl:call-template>            </xsl:for-each>        </xsl:if>                        <xsl:if test="count(xsd:attributeGroup) &gt; 0">            <tr><td colspan="2" class="small">Attribute Groups</td></tr>            <xsl:for-each select="xsd:attributeGroup">            <xsl:call-template name="tableRow">                    <xsl:with-param name="name">&lt;b&gt;<xsl:value-of select="@ref"/>&lt;/b&gt;</xsl:with-param>                    <xsl:with-param name="comment"><xsl:apply-templates  select="xsd:annotation"/></xsl:with-param>                     <xsl:with-param name="value">Reference: <xsl:call-template name="getInternalLink"><xsl:with-param name="ref"><xsl:value-of select="@ref"/></xsl:with-param></xsl:call-template></xsl:with-param>            </xsl:call-template>            </xsl:for-each>        </xsl:if>        </table>        </td></tr>    <xsl:call-template name="getRefs">        <xsl:with-param name="name">            <xsl:value-of select="@name"/>        </xsl:with-param>    </xsl:call-template>    </table>    <br/>    <br/>    <xsl:for-each select="xsd:sequence | xsd:choice | xsd:all">        <xsl:for-each select="xsd:element">            <xsl:if test="count(@type) = 0">                <xsl:element name="a">                    <xsl:attribute name="name">                        <xsl:value-of select="../../@name" />_<xsl:value-of select="@name" />                    </xsl:attribute>                 </xsl:element>                <xsl:apply-templates select = "."/>            </xsl:if>        </xsl:for-each>    </xsl:for-each></xsl:template><!-- End of complexType --><!-- Get references to element of named type --><xsl:template name="getRefs">    <xsl:param name="name" />    <xsl:variable name="links">            <xsl:for-each select="//xsd:complexType | //xsd:simpleType | //xsd:group">            <xsl:variable name="parent"><xsl:value-of select="@name"/></xsl:variable>            <xsl:variable name="elName"><xsl:value-of select="name()"/></xsl:variable>            <!--<p>    looking at: <xsl:value-of select="$parent"/></p>-->                    <xsl:for-each select=".//@type">                        <!--<p>.. looking at: (<xsl:value-of select="."/> = <xsl:value-of select="name()"/>)</p>-->                <xsl:if test="string(.) = $name and string-length($parent) &gt; 0">                &lt;a href="#<xsl:value-of select="$parent"/>"&gt;<xsl:value-of select="$parent"/>&lt;/a&gt; (<xsl:value-of select="$elName"/>)                </xsl:if>            </xsl:for-each>        </xsl:for-each>             <xsl:for-each select="/xsd:schema/xsd:element">            <xsl:variable name="parent"><xsl:value-of select="@name"/></xsl:variable>            <xsl:variable name="elName"><xsl:value-of select="name()"/></xsl:variable>                 <xsl:if test="@type = $name">                &lt;a href="#<xsl:value-of select="$parent"/>"&gt;<xsl:value-of select="$parent"/>&lt;/a&gt; (<xsl:value-of select="$elName"/>)                </xsl:if>        </xsl:for-each>                   </xsl:variable>       <xsl:if test="string-length($links) &gt; 0">        <xsl:call-template name="tableRow">             <xsl:with-param name="name"><xsl:value-of select="$name"/> used by: <xsl:value-of select="$links"/></xsl:with-param>            <xsl:with-param name="comment">Instances of this element which are used by other elements in this document</xsl:with-param>        </xsl:call-template>    </xsl:if></xsl:template><xsl:template name="min_max_string">        Occurances:<xsl:text> </xsl:text>    <xsl:choose>        <xsl:when test="count(@minOccurs) = 0 and count(@maxOccurs)=0">1</xsl:when>        <xsl:otherwise>                   <xsl:choose>                <xsl:when test="count(@minOccurs) &gt; 0"><xsl:value-of select="@minOccurs"/><xsl:text> </xsl:text></xsl:when>                <xsl:otherwise>1</xsl:otherwise>            </xsl:choose>            ...            <xsl:choose>                <xsl:when test="count(@maxOccurs) &gt; 0"><xsl:value-of select="@maxOccurs"/></xsl:when>                <xsl:otherwise>1</xsl:otherwise>            </xsl:choose>        </xsl:otherwise>    </xsl:choose> </xsl:template><!-- xsd:sequence or xsd:choice or xsd:all --><xsl:template match="xsd:sequence | xsd:choice | xsd:all">            <xsl:for-each select="xsd:group">        <xsl:call-template name="tableRow">                <xsl:with-param name="name">Group</xsl:with-param>                <xsl:with-param name="comment"><xsl:choose>                    <xsl:when test="count(xsd:annotation/xsd:documentation) &gt; 0"> <xsl:apply-templates  select="xsd:annotation"/></xsl:when>                    <xsl:otherwise>A group of elements to include with this element</xsl:otherwise>                </xsl:choose></xsl:with-param>                <xsl:with-param name="value">Ref: <xsl:call-template name="getInternalLink">                    <xsl:with-param name="ref"><xsl:value-of select="@ref"/></xsl:with-param>                    </xsl:call-template> <xsl:if test="count(@minOccurs) &gt; 0 or count(@maxOccurs) &gt; 0 ">  <xsl:call-template name="min_max_string"/>   </xsl:if></xsl:with-param>        </xsl:call-template>    </xsl:for-each>            <xsl:for-each select="xsd:element">                <xsl:element name="a">          <xsl:attribute name="name">            <xsl:value-of select="@name" />          </xsl:attribute>         </xsl:element>    <xsl:call-template name="tableRow">            <xsl:with-param name="name">&lt;b&gt;<xsl:value-of select="@name"/>&lt;/b&gt;</xsl:with-param>            <xsl:with-param name="comment"><xsl:apply-templates  select="xsd:annotation"/></xsl:with-param>            <xsl:with-param name="value">                <xsl:choose>                    <xsl:when test="count(@type) &gt; 0">&lt;table&gt;&lt;tr&gt;&lt;td  class="small"&gt;Type : <xsl:call-template name="getInternalLink"><xsl:with-param name="ref"><xsl:value-of select="@type"/></xsl:with-param></xsl:call-template>    &lt;/td&gt;&lt;/tr&gt;                    <xsl:if test="count(@minOccurs) &gt; 0">&lt;tr&gt;&lt;td  class="small"&gt;  <xsl:call-template name="min_max_string"/>    &lt;/td&gt;&lt;/tr&gt;</xsl:if>                    &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</xsl:when>                                                                                    <xsl:when test="count(@ref) &gt; 0">                            Ref: <xsl:call-template name="getInternalLink"><xsl:with-param name="ref"><xsl:value-of select="@ref"/></xsl:with-param></xsl:call-template>                        </xsl:when>                        <xsl:otherwise>                    <xsl:if test="count(xsd:complexType) &gt; 0">&lt;table&gt;&lt;tr&gt;&lt;td  class="small"&gt;Type : &lt;a href="#<xsl:value-of select="../../@name"/>_<xsl:value-of select="@name"/>"&gt;<xsl:value-of select="@name"/>&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;                    <xsl:if test="count(@minOccurs) &gt; 0">&lt;tr&gt;&lt;td  class="small"&gt;  <xsl:call-template name="min_max_string"/>  </xsl:if>&lt;/td&gt;&lt;/tr&gt;</xsl:if>                    &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;                                        <!--<xsl:apply-templates select="xsd:complexType"/>                                        <xsl:for-each select="xsd:complexType/xsd:attribute">Attribute: <xsl:value-of                 select="@name"/>, type: <xsl:value-of select="@type"/>&lt;br/&gt;</xsl:for-each>-->                                    </xsl:otherwise>                </xsl:choose>            </xsl:with-param>    </xsl:call-template>    </xsl:for-each>            <xsl:for-each select="xsd:any">        <xsl:call-template name="tableRow">                <xsl:with-param name="name">Any Element</xsl:with-param>                <xsl:with-param name="comment">This allows an element of any type to be added to the XML document in this location. <xsl:apply-templates  select="xsd:annotation"/></xsl:with-param>                <xsl:with-param name="value">&lt;table&gt;&lt;tr&gt;&lt;td  class="small"&gt;Process Contents: <xsl:value-of select="@processContents"/>&lt;/td&gt;&lt;/tr&gt;                    <xsl:if test="count(@minOccurs) &gt; 0">&lt;tr&gt;&lt;td   class="small"&gt;Minimum occurances allowed: <xsl:value-of select="@minOccurs"/>&lt;/td&gt;&lt;/tr&gt;</xsl:if>                    <xsl:if test="count(@maxOccurs) &gt; 0">&lt;tr&gt;&lt;td  class="small"&gt;Maximum occurances allowed: <xsl:value-of select="@maxOccurs"/>&lt;/td&gt;&lt;/tr&gt;</xsl:if>                    &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</xsl:with-param>        </xsl:call-template>    </xsl:for-each>            <xsl:if test="count(xsd:sequence) &gt; 0">        <tr><td colspan="2"  class="small">The following SUB elements must appear in the sequence outlined here.               <xsl:if test="count(@minOccurs) &gt;= 0">Minimum occurances allowed: <xsl:value-of select="@minOccurs"/></xsl:if>        <xsl:if test="count(@maxOccurs) &gt;= 0">Maximum occurances allowed: <xsl:value-of select="@maxOccurs"/></xsl:if>                         </td></tr>        <xsl:for-each select="xsd:sequence">                <xsl:apply-templates  select="."/>        </xsl:for-each>    </xsl:if>        <xsl:if test="count(xsd:choice) &gt; 0">        <xsl:for-each select="xsd:choice">                        <tr><td colspan="2" class="small">Only one of the following SUB elements may appear.                 <xsl:if test="count(@minOccurs) &gt; 0">Minimum occurances allowed: <xsl:value-of select="@minOccurs"/></xsl:if>         <xsl:if test="count(@maxOccurs) &gt; 0">Maximum occurances allowed: <xsl:value-of select="@maxOccurs"/></xsl:if>         </td></tr>                <xsl:apply-templates  select="."/>        </xsl:for-each>    </xsl:if>            <xsl:if test="count(xsd:all) &gt; 0">        <tr><td colspan="2" class="small">The following SUB elements may appear once or zero times in any order</td></tr>        <xsl:for-each select="xsd:all">                <xsl:apply-templates  select="."/>        </xsl:for-each>    </xsl:if>    </xsl:template><!-- restriction --><!-- todo: Include other restrictions!!--><xsl:template match="xsd:restriction">        <xsl:call-template name="tableRow">            <xsl:with-param name="name">&lt;a href="<xsl:call-template name="getExternalURL"><xsl:with-param name="ref">restriction</xsl:with-param></xsl:call-template>"&gt;Restriction:&lt;/a&gt; </xsl:with-param>            <xsl:with-param name="value">Base: <xsl:call-template name="getInternalLink"><xsl:with-param name="ref"><xsl:value-of select="@base"/></xsl:with-param></xsl:call-template>&lt;br/&gt;            <xsl:if test="count(xsd:maxExclusive) &gt; 0">                &lt;br/&gt;Maximum value exclusive: <xsl:value-of select="xsd:maxExclusive/@value"/>            </xsl:if>                        <xsl:if test="count(xsd:minExclusive) &gt; 0">                &lt;br/&gt;Minimum value exclusive: <xsl:value-of select="xsd:minExclusive/@value"/>            </xsl:if>            <xsl:if test="count(xsd:maxInclusive) &gt; 0">                &lt;br/&gt;Maximum value inclusive: <xsl:value-of select="xsd:maxInclusive/@value"/>            </xsl:if>                        <xsl:if test="count(xsd:minInclusive) &gt; 0">                &lt;br/&gt;Minimum value inclusive: <xsl:value-of select="xsd:minInclusive/@value"/>            </xsl:if>                        </xsl:with-param>        </xsl:call-template>             <xsl:if test="count(xsd:enumeration) &gt; 0">        <xsl:call-template name="tableRow">                <xsl:with-param name="name">Allowed values:</xsl:with-param>                <xsl:with-param name="value">&lt;table&gt;<xsl:for-each select="xsd:enumeration">                    &lt;tr&gt;&lt;td class="small"&gt;<xsl:value-of select="@value"/>&lt;/td&gt;                    <xsl:if test="count(xsd:annotation/xsd:documentation) &gt; 0">                    &lt;td  class="small"&gt;                     &lt;span style="color:#a0a0a0;font-style: italic"&gt;                    (<xsl:apply-templates  select="xsd:annotation"/>)                    &lt;/span&gt;                    &lt;/td&gt;&lt;/tr&gt;                    </xsl:if>                </xsl:for-each>&lt;/table&gt;</xsl:with-param>        </xsl:call-template>     </xsl:if></xsl:template><!-- extension --><xsl:template match="xsd:extension">        <xsl:call-template name="tableRow">            <xsl:with-param name="name">Extension: </xsl:with-param>            <xsl:with-param name="comment">The child elements and attributes of the base element will be required in this element too.</xsl:with-param>            <xsl:with-param name="value">Base: <xsl:call-template name="getInternalLink"><xsl:with-param name="ref"><xsl:value-of select="@base"/></xsl:with-param></xsl:call-template> </xsl:with-param>        </xsl:call-template>                  <xsl:call-template name="sequence_choice_all"/>                <xsl:if test="count(xsd:attribute) &gt; 0">            <tr><td colspan="2"  class="small">Attributes</td></tr>            <xsl:for-each select="xsd:attribute">            <xsl:call-template name="tableRow">                    <xsl:with-param name="name">&lt;b&gt;<xsl:value-of select="@name"/>&lt;/b&gt;</xsl:with-param>                    <xsl:with-param name="comment"><xsl:apply-templates  select="xsd:annotation"/></xsl:with-param>                    <xsl:with-param name="value">Type: <xsl:call-template name="getInternalLink"><xsl:with-param name="ref"><xsl:value-of select="@type"/></xsl:with-param></xsl:call-template>, Use: <xsl:choose>                            <xsl:when test="count(@use) &gt; 0"><xsl:value-of select="@use"/></xsl:when>                            <xsl:otherwise>optional</xsl:otherwise></xsl:choose><xsl:if test="count(@default) &gt; 0">, default: &lt;b&gt;<xsl:value-of select="@default"/>&lt;/b&gt;</xsl:if></xsl:with-param>            </xsl:call-template>            </xsl:for-each>        </xsl:if>                        <xsl:for-each select="xsd:attributeGroup">             <xsl:call-template name="tableRow">                <xsl:with-param name="name">Attribute Group</xsl:with-param>                <xsl:with-param name="comment"><xsl:choose>                    <xsl:when test="count(xsd:annotation/xsd:documentation) &gt; 0"> <xsl:apply-templates  select="xsd:annotation"/></xsl:when>                    <xsl:otherwise>A group of attributes to include with this element</xsl:otherwise>                </xsl:choose></xsl:with-param>                <xsl:with-param name="value">Ref: <xsl:call-template name="getInternalLink">                    <xsl:with-param name="ref"><xsl:value-of select="@ref"/></xsl:with-param>                    </xsl:call-template> </xsl:with-param>            </xsl:call-template>        </xsl:for-each>                </xsl:template><!-- group --><xsl:template match="xsd:group">    <xsl:element name="a">  <xsl:attribute name="name">    <xsl:value-of select="@name" />  </xsl:attribute> </xsl:element><table frame="box" rules="all" align="centre" cellpadding="4" width="100%">    <xsl:call-template name="tableRow">        <xsl:with-param name="name">&lt;a href="<xsl:call-template name="getExternalURL"><xsl:with-param name="ref">group</xsl:with-param></xsl:call-template>#"&gt;Group:&lt;/a&gt; &lt;b&gt;<xsl:value-of select="@name"/>&lt;/b&gt;</xsl:with-param>        <xsl:with-param name="comment"><xsl:apply-templates  select="xsd:annotation"/></xsl:with-param>    </xsl:call-template>              <tr><td><table frame="box" rules="all" align="centre" cellpadding="4">    <xsl:if test="count(xsd:sequence) &gt; 0">               <xsl:for-each select="xsd:sequence">             <tr><td colspan="2" class="small">The following elements must appear in the sequence outlined here.                                        <xsl:if test="count(@minOccurs) &gt; 0">Minimum occurances allowed: <xsl:value-of select="@minOccurs"/></xsl:if>                 <xsl:if test="count(@maxOccurs) &gt; 0">Maximum occurances allowed: <xsl:value-of select="@maxOccurs"/></xsl:if> </td></tr>                <xsl:apply-templates  select="."/>        </xsl:for-each>    </xsl:if>        <xsl:if test="count(xsd:choice) &gt; 0">        <xsl:for-each select="xsd:choice">                    <tr><td colspan="2" class="small">Only one of the following elements may appear.                      <xsl:if test="count(@minOccurs) &gt; 0">Minimum occurances allowed: <xsl:value-of select="@minOccurs"/></xsl:if>                 <xsl:if test="count(@maxOccurs) &gt; 0">Maximum occurances allowed: <xsl:value-of select="@maxOccurs"/></xsl:if> </td></tr>                <xsl:apply-templates  select="."/>        </xsl:for-each>    </xsl:if>            <xsl:if test="count(xsd:all) &gt; 0">        <tr><td colspan="2" class="small">The following             elements may appear once or zero times in any order</td></tr>        <xsl:for-each select="xsd:all">                <xsl:apply-templates  select="."/>        </xsl:for-each>    </xsl:if></table>        </td></tr>    <xsl:call-template name="getRefs">    <xsl:with-param name="name">        <xsl:value-of select="@name"/>    </xsl:with-param></xsl:call-template>        </table><br/><br/>    </xsl:template><!-- attributeGroup --><xsl:template match="xsd:attributeGroup">    <xsl:element name="a">  <xsl:attribute name="name">    <xsl:value-of select="@name" />  </xsl:attribute> </xsl:element><table frame="box" rules="all" align="centre" cellpadding="4" width="100%">    <xsl:call-template name="tableRow">        <xsl:with-param name="name">&lt;a href="<xsl:call-template name="getExternalURL"><xsl:with-param name="ref">attributeGroup</xsl:with-param></xsl:call-template>#"&gt;Attribute Group:&lt;/a&gt; &lt;b&gt;<xsl:value-of select="@name"/>&lt;/b&gt;</xsl:with-param>        <xsl:with-param name="comment"><xsl:apply-templates  select="xsd:annotation"/></xsl:with-param>    </xsl:call-template>              <tr><td><table frame="box" rules="all" align="centre" cellpadding="4">        <xsl:if test="count(xsd:attribute) &gt; 0">        <tr><td colspan="2"  class="small">Attributes</td></tr>        <xsl:for-each select="xsd:attribute">        <xsl:call-template name="tableRow">                <xsl:with-param name="name">&lt;b&gt;<xsl:value-of select="@name"/>&lt;/b&gt;</xsl:with-param>                <xsl:with-param name="comment"><xsl:apply-templates  select="xsd:annotation"/></xsl:with-param>                <xsl:with-param name="value">Type: <xsl:call-template name="getInternalLink"><xsl:with-param name="ref"><xsl:value-of select="@type"/></xsl:with-param></xsl:call-template>, Use: <xsl:choose>                        <xsl:when test="count(@use) &gt; 0"><xsl:value-of select="@use"/></xsl:when>                        <xsl:otherwise>optional</xsl:otherwise></xsl:choose><xsl:if test="count(@default) &gt; 0">, default: &lt;b&gt;<xsl:value-of select="@default"/>&lt;/b&gt;</xsl:if></xsl:with-param>        </xsl:call-template>        </xsl:for-each>    </xsl:if>        </table>        </td></tr>    <xsl:call-template name="getRefs">    <xsl:with-param name="name">        <xsl:value-of select="@name"/>    </xsl:with-param></xsl:call-template>        </table><br/><br/>    </xsl:template><xsl:template match="xsd:annotation">    <xsl:value-of select="xsd:documentation"/>        <xsl:if test="count(xsd:appinfo) &gt; 0">          &lt;br/&gt;        <xsl:if test="count(xsd:appinfo/meta:units) &gt; 0">               &lt;b&gt;Units in SI: <xsl:value-of select="xsd:appinfo/meta:units"/>&lt;/b&gt;&lt;br/&gt;        </xsl:if>        <xsl:if test="count(xsd:appinfo/meta:default_value) &gt; 0">               &lt;b&gt;Default value: <xsl:value-of select="xsd:appinfo/meta:default_value"/>&amp;nbsp;<xsl:value-of select="xsd:appinfo/meta:units"/>&lt;/b&gt;&lt;br/&gt;        </xsl:if>        <xsl:if test="count(xsd:appinfo/meta:typical_value) &gt; 0">               &lt;b&gt;Typical value: <xsl:value-of select="xsd:appinfo/meta:typical_value"/>&amp;nbsp;<xsl:value-of select="xsd:appinfo/meta:units"/>&lt;/b&gt;&lt;br/&gt;        </xsl:if>    </xsl:if>        </xsl:template><!-- Function add a single table row--><xsl:template name="tableRow">    <xsl:param name="name" />    <xsl:param name="comment" />    <xsl:param name="value" />        <xsl:variable name="commentSize">        <xsl:choose>            <xsl:when test="string-length($comment)>200">85%</xsl:when>            <xsl:when test="string-length($comment)>100">90%</xsl:when>            <xsl:otherwise>90%</xsl:otherwise>        </xsl:choose>    </xsl:variable>    <tr>        <xsl:choose>            <xsl:when test="string-length($value)>0">                <td  width="500" bgcolor="#FFFFFF"  class="small">                    <xsl:choose>                        <xsl:when test="string-length($comment)>0">                            <table>                                <tr>                                    <td class="small"><xsl:value-of select="$name"  disable-output-escaping="yes"/></td>                                </tr>                                <tr>                                    <td>                                    <xsl:element name="span">                                        <xsl:attribute name="style">color:#a0a0a0;font-style: italic;font-size: <xsl:value-of select="$commentSize"> </xsl:value-of></xsl:attribute>                                        <xsl:value-of select="$comment"  disable-output-escaping="yes"/>                                    </xsl:element>                                    </td>                                </tr>                            </table>                        </xsl:when>                        <xsl:otherwise>                            <xsl:value-of select="$name" disable-output-escaping="yes"/>                        </xsl:otherwise>                    </xsl:choose>                </td>                <td   width="75%" class="small" bgcolor="#FFFFFF" valign="top" ><xsl:value-of select="$value"  disable-output-escaping="yes"/></td>            </xsl:when>            <xsl:otherwise>                            <xsl:choose>                        <xsl:when test="string-length($comment)>0">                <td  width="25%" bgcolor="#FFFFFF"  colspan="2"  class="small">                                                <p><xsl:value-of select="$name" disable-output-escaping="yes"/></p>                            <p><xsl:element name="span">                                        <xsl:attribute name="style">color:#a0a0a0;font-style: italic;font-size: <xsl:value-of select="$commentSize"> </xsl:value-of></xsl:attribute>                                        <xsl:value-of select="$comment"  disable-output-escaping="yes"/>                                    </xsl:element></p>                </td>                        </xsl:when>                        <xsl:otherwise>                                                    <td bgcolor="#FFFFFF"  colspan="2"   class="small">                            <xsl:value-of select="$name" disable-output-escaping="yes"/>                            </td>                        </xsl:otherwise>                </xsl:choose>            </xsl:otherwise>        </xsl:choose>    </tr> </xsl:template><!-- Function to get link to explination of types.--><xsl:template name="getInternalLink">    <xsl:param name="ref" />    <xsl:choose>         <xsl:when test="starts-with($ref,'xsd:') or starts-with($ref,'xsl:')">  <!-- xsl elements -->        &lt;a href="<xsl:call-template name="getExternalURL">                        <xsl:with-param name="ref"><xsl:value-of select="substring-after($ref, ':')"/></xsl:with-param>                    </xsl:call-template>"&gt;<xsl:value-of select="$ref"/>&lt;/a&gt;        </xsl:when>        <xsl:when test="contains($ref,':')">  <!-- elements in other files -->                    <xsl:variable name="otherSchema"><xsl:value-of select="substring-before($ref, ':')"/></xsl:variable>            <xsl:variable name="element"><xsl:value-of select="substring-after($ref, ':')"/></xsl:variable>            <xsl:variable name="ver">1.7.1</xsl:variable>            <xsl:variable name="verShort">1.7.1</xsl:variable>            <xsl:variable name="schemaLocation">            <xsl:choose>    <!-- Hard coded, but I'm sure there's a way to automate it with the namespace and import info..-->                <xsl:when test="$otherSchema='meta'">Transform.jsp?localFile=NeuroMLFiles/Schemata/v<xsl:value-of select="$ver"/>/Level1/Metadata_v<xsl:value-of select="$verShort"/>.xsd</xsl:when>                <xsl:when test="$otherSchema='bio'">Transform.jsp?localFile=NeuroMLFiles/Schemata/v<xsl:value-of select="$ver"/>/Level2/Biophysics_v<xsl:value-of select="$verShort"/>.xsd</xsl:when>                <xsl:when test="$otherSchema='cml'">Transform.jsp?localFile=NeuroMLFiles/Schemata/v<xsl:value-of select="$ver"/>/Level2/ChannelML_v<xsl:value-of select="$verShort"/>.xsd</xsl:when>                <xsl:when test="$otherSchema='net'">Transform.jsp?localFile=NeuroMLFiles/Schemata/v<xsl:value-of select="$ver"/>/Level3/NetworkML_v<xsl:value-of select="$verShort"/>.xsd</xsl:when>                <xsl:when test="$otherSchema='mml'">../NeuroMLValidator/Transform.jsp?localFile=NeuroMLFiles/Schemata/v<xsl:value-of select="$ver"/>/Level1/MorphML_v<xsl:value-of select="$verShort"/>.xsd</xsl:when>            </xsl:choose>        </xsl:variable>                    &lt;a href="<xsl:value-of select="$schemaLocation"/>&amp;xslFile=NeuroMLFiles/Schemata/XSD_Readable.xsl#<xsl:value-of select="$element"/>"&gt;<xsl:value-of select="$ref"/>&lt;/a&gt;         <!--        in schema <xsl:value-of select="$otherSchema"/>        is element <xsl:value-of select="$element"/>        , location: <xsl:value-of select="$schemaLocation"/>        -->        &lt;/a&gt;                        </xsl:when>        <xsl:otherwise>&lt;a href="#<xsl:value-of select="$ref"/>"&gt;<xsl:value-of select="$ref"/>&lt;/a&gt;</xsl:otherwise>    </xsl:choose>        </xsl:template><!-- Function to get link to explination of types.--><xsl:template name="getExternalURL">    <xsl:param name="ref" />    <xsl:choose>         <xsl:when test="$ref='simpleType'">http://www.w3schools.com/schema/el_simpletype.asp</xsl:when>        <xsl:when test="$ref='complexType'">http://www.w3schools.com/schema/el_complextype.asp</xsl:when>        <xsl:when test="$ref='string'">http://www.w3schools.com/schema/schema_dtypes_string.asp</xsl:when>        <xsl:when test="$ref='byte' or $ref='decimal' or $ref='int' or $ref='integer' or $ref='long' or $ref='negativeInteger' or $ref='nonNegativeInteger' or $ref='nonPositiveInteger' or $ref='positiveInteger' or $ref='short' or $ref='unsignedLong' or $ref='unsignedInt' or $ref='unsignedShort' or $ref='unsignedByte'">        http://www.w3schools.com/schema/schema_dtypes_numeric.asp</xsl:when>        <xsl:when test="$ref='restriction'">http://www.w3schools.com/schema/schema_facets.asp</xsl:when>        <xsl:when test="$ref='group'">http://www.w3schools.com/schema/el_group.asp</xsl:when>        <xsl:when test="$ref='attributeGroup'">http://www.w3schools.com/schema/el_attributegroup.asp</xsl:when>                <xsl:otherwise>http://www.w3schools.com/schema</xsl:otherwise>    </xsl:choose></xsl:template></xsl:stylesheet>